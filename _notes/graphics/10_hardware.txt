
- https://stackoverflow.com/questions/6399676/how-does-opengl-work-at-the-lowest-level
- http://fgiesen.wordpress.com/2011/07/01/a-trip-through-the-graphics-pipeline-2011-part-1/


# Graphics â€“ Hardware

hardware:
  - https://en.wikipedia.org/wiki/Framebuffer
  - https://en.wikipedia.org/wiki/Graphics_card
  - https://en.wikipedia.org/wiki/Graphics_processing_unit

framebuffer: [https://en.wikipedia.org/wiki/Framebuffer]
  > a piece of memory that stores the pixel data of a single video frame to be rendered to a screen
  > often a separate physical piece of memory, which is memory mapped to some portion of RAM accessible to the CPU
  > double buffering/page flipping;
    > framebuffers tend to contain enough space for two frames (or "pages")
    > one page is actively used by the display device and the other is being written to for the next frame

CPU rendering:
  > the CPU can do all the rendering itself, sometimes called "software rendering" [w/Software_rendering]
  > however, rendering (e.g. taking a 3D mesh and rasterizing it) can be a heavy task, especially to do at high FPS
  > hardware graphics acceleration was invented to offload the work from the CPU

GPU: [w/Graphics_processing_unit]
  > https://www.tutorialspoint.com/cuda/cuda_introduction_to_the_gpu.htm
  > specialized circuit that's efficient at manipulating computer graphics and image processing
    > unlike CPUs, GPUs are highly parallel (lots of cores that can each run a shader for example)
  > can come either as a separate expansion card or as integrated graphics [w/Graphics_card]
  > CPU sends a command to the GPU (through something like OpenGL)
  > GPU rasterizes it and bitblits the result onto the framebuffer

graphics libraries:
  > examples: OpenGL, DirectX, Metal, Vulkan
  > https://www.haroldserrano.com/blog/how-to-develop-a-rendering-engine-an-overview
