
# OpenGL pipeline

history:
  - fixed-function pipeline [legacy]
  - programmable pipeline (shaders)


vertex specification
  -> [vertex shader]
    -> [tesselation unit]
      -> [geometry shader]
        -> [rasterizer]
          -> [fragment shader]
            -> final frame
ï¿¼
pipeline:
  > an input buffer is set up containing vertex data and other attributes
  > GPUs have a number of "shader cores" that run in parallel
  > each shader core gets a piece of the vertex buffer and computes an output
  > the output of one shader may be passed to the next stage of the pipeline


## Buffers

https://webgl2fundamentals.org/webgl/lessons/resources/webgl-state-diagram.html


https://community.khronos.org/t/vertex-array-object-vs-vertex-buffer-object/72747

vertex array objects:
  > see https://stackoverflow.com/questions/50255115/what-are-vertex-arrays-in-opengl-webgl2
  > in summary, vertex array objects allow us to set the vertex attributes ("vertex specification") at init
    time, rather than at render time
  > however, it requires a bit more organization because you need to know the shader attribute location at init time
  > this can be solved by setting the attribute location manually (see the SO post above)
